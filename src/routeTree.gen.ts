/* prettier-ignore-start */

/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file is auto-generated by TanStack Router

import { createFileRoute } from '@tanstack/react-router'

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as DasboardImport } from './routes/dasboard'
import { Route as IndexImport } from './routes/index'

// Create Virtual Routes

const DashboardLazyImport = createFileRoute('/dashboard')()
const AboutLazyImport = createFileRoute('/about')()

// Create/Update Routes

const DashboardLazyRoute = DashboardLazyImport.update({
  path: '/dashboard',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/dashboard.lazy').then((d) => d.Route))

const AboutLazyRoute = AboutLazyImport.update({
  path: '/about',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/about.lazy').then((d) => d.Route))

const DasboardRoute = DasboardImport.update({
  path: '/dasboard',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  path: '/',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/index.lazy').then((d) => d.Route))

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/dasboard': {
      id: '/dasboard'
      path: '/dasboard'
      fullPath: '/dasboard'
      preLoaderRoute: typeof DasboardImport
      parentRoute: typeof rootRoute
    }
    '/about': {
      id: '/about'
      path: '/about'
      fullPath: '/about'
      preLoaderRoute: typeof AboutLazyImport
      parentRoute: typeof rootRoute
    }
    '/dashboard': {
      id: '/dashboard'
      path: '/dashboard'
      fullPath: '/dashboard'
      preLoaderRoute: typeof DashboardLazyImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/dasboard': typeof DasboardRoute
  '/about': typeof AboutLazyRoute
  '/dashboard': typeof DashboardLazyRoute
}

interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/dasboard': typeof DasboardRoute
  '/about': typeof AboutLazyRoute
  '/dashboard': typeof DashboardLazyRoute
}

interface FileRoutesById {
  '/': typeof IndexRoute
  '/dasboard': typeof DasboardRoute
  '/about': typeof AboutLazyRoute
  '/dashboard': typeof DashboardLazyRoute
}

interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/dasboard' | '/about' | '/dashboard'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/dasboard' | '/about' | '/dashboard'
  id: '/' | '/dasboard' | '/about' | '/dashboard'
  fileRoutesById: FileRoutesById
}

interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  DasboardRoute: typeof DasboardRoute
  AboutLazyRoute: typeof AboutLazyRoute
  DashboardLazyRoute: typeof DashboardLazyRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  DasboardRoute: DasboardRoute,
  AboutLazyRoute: AboutLazyRoute,
  DashboardLazyRoute: DashboardLazyRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* prettier-ignore-end */

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/dasboard",
        "/about",
        "/dashboard"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/dasboard": {
      "filePath": "dasboard.tsx"
    },
    "/about": {
      "filePath": "about.lazy.tsx"
    },
    "/dashboard": {
      "filePath": "dashboard.lazy.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
